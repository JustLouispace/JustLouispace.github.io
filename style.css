/* Basic Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Body Styling */
body {
    font-family: 'Arial', sans-serif;
    position: relative; /* Positioning context for pseudo-element */
    color: #333;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
}

body::before {
    content: ''; /* Necessary to create the pseudo-element */
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('cute-images.jpeg'); /* Background image */
    background-size: cover; /* Ensure the image covers the whole body */
    background-position: center; /* Center the image */
    background-attachment: fixed; /* Keep the background fixed */
    opacity: 0.7; /* Adjust the opacity as needed (0 is fully transparent, 1 is fully opaque) */
    z-index: -1; /* Ensure the pseudo-element stays behind the content */
}

.container {
    position: relative; /* Keeps the content on top */
    background-color: rgba(255, 255, 255, 0.8); /* Slightly transparent background for readability */
    border-radius: 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); /* Add shadow around the container */
    width: 360px; /* Fixed width */
    padding: 20px;
    text-align: center;
    max-width: 100%; /* Allow full width on smaller screens */
    height: 480px; /* Fixed height to avoid expanding */
}

/* Responsive Container for Mobile */
@media (max-width: 480px) {
    .container {
        width: 90%; /* Width for mobile */
    }
}

/* Title Styling */
h1 {
    font-size: 1.8rem;
    color: #333;
    margin-bottom: 15px;
    margin-top: 15px
}

/* Button Styling */
button {
    border: none;
    padding: 10px 20px;
    margin: 8px;
    font-size: 1rem;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.2s;
}

button:active {
    transform: scale(0.95);
}

/* Smooth transition for Result and Attempts */
#result, #attempts {
    transition: opacity 0.3s, transform 0.3s;
    opacity: 1;
}

#result.animate, #attempts.animate {
    opacity: 0;
    transform: scale(0.9);
}

#historyList::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 20px;
    background: linear-gradient(to bottom, transparent, rgba(0, 0, 0, 0.1)); /* Gradual shadow effect */
    pointer-events: none; /* Ignore clicks */
    opacity: 0; /* Hidden by default */
    transition: opacity 0.3s;
}

/* Show shadow only when scrollable */
#historyList:has(li) {
    overflow-y: auto;
}

#historyList:has(li):hover::after {
    opacity: 1;
}


/* Smooth appearance for History List */
#historyList li {
    padding: 8px 0;
    font-size: 0.95rem;
    color: #666;
    border-bottom: 1px solid #eee;
    transition: opacity 0.3s ease-in-out;
    opacity: 0;
}

button:disabled {
    background-color: gray; /* Disabled button color */
    color: #999;
    cursor: not-allowed;
}

button:first-of-type {
    background-color: #4CAF50;
    color: white;
}

button:first-of-type:hover {
    background-color: #45a049;
}

button:last-of-type {
    background-color: #ff4d4d;
    color: white;
}

button:last-of-type:hover {
    background-color: #e04444;
}

/* Result Styling */
#result {
    font-size: 1.5rem;
    color: #4CAF50;
    margin-top: 15px;
    font-weight: bold;
}

/* Attempts and History Styling */
#attempts {
    font-size: 1rem;
    color: #555;
    margin-top: 10px;
}

#history {
    margin-top: 20px;
    margin-left: 20px;
    margin-right: 20px;
    text-align: left;
}

#history h2 {
    font-size: 1.2rem;
    color: #333;
    margin-bottom: 10px;
}

#historyList {
    list-style-type: none;
    padding-left: 0;
    max-height: 150px; /* Fixed height for history list */
    overflow-y: auto;
    border-top: 1px solid #eee;
    margin-top: 10px;
}


@keyframes fadeSlide {
    0% {
        opacity: 0;
        transform: translateY(5px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

#attemptCount {
    display: inline-block; /* Ensure the span is treated as inline-block for animation */
    transition: transform 0.3s ease, opacity 0.3s ease; /* Smooth transition */
}

#attemptCount.animate {
    animation: fadeSlide 0.3s ease-in-out;
}

/* Animation for new history item */
@keyframes fadeSlideIn {
    0% {
        opacity: 0;
        transform: translateY(10px); /* Start slightly lower */
    }
    100% {
        opacity: 1;
        transform: translateY(0); /* End at the original position */
    }
}

#historyList li {
    opacity: 0; /* Start hidden */
    animation: fadeSlideIn 0.4s ease forwards; /* Apply animation */
}


.sakura-fall {
    position: fixed;
    top: -50px; /* Start slightly above the viewport */
    width: 20px;
    height: 20px;
    background-image: url('sakura-flower.png'); /* Replace with sakura petal image path */
    background-size: cover;
    opacity: 1;
    pointer-events: none; /* Petals don't block interactions */
    z-index: -1000;
    animation: fall linear infinite;
}

/* Sakura Fall Animation */
@keyframes fall {
    to {
        transform: translateY(100vh) rotate(360deg); /* Petal falls and rotates */
        opacity: 0.3;
    }
}